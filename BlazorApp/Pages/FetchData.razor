@page "/fetchdata"
@using BlazorApp.Models;
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (lstdemoDatas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>qrStyle_No</th>
                <th>qrBuyer. (C)</th>
                <th>qrColor. (F)</th>
                <th>qrSizeName</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in lstdemoDatas)
            {
                <tr>
                    <td>@forecast.qrStyle_No</td>
                    <td>@forecast.qrBuyer</td>
                    <td>@forecast.qrColor</td>
                    <td>@forecast.qrSizeName</td>
                    <td>
                        <a href="/editdata/@forecast.Id">Edit</a> |
                        <a href="/deletedata/@forecast.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private WeatherForecast[]? forecasts;

    private List<DemoData>? lstdemoDatas;
    string url = "http://localhost:5105/api/Demo/Report";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        // content.Headers.Add("", "");
        var postBody = new { };
        using var response = await new HttpClient().PostAsJsonAsync(url, postBody);

        // convert response data to Article object
        lstdemoDatas = await response.Content.ReadFromJsonAsync<List<DemoData>>();
    }

    protected async Task Delete()
    {
        
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }


}
